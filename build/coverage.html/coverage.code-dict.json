{"/home/travis/build/npmtest/node-npmtest-minimize/test.js":"/* istanbul instrument in package npmtest_minimize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-minimize/lib.npmtest_minimize.js":"/* istanbul instrument in package npmtest_minimize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_minimize = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_minimize = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-minimize/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-minimize && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_minimize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_minimize\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_minimize.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_minimize.rollup.js'] =\n            local.assetsDict['/assets.npmtest_minimize.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_minimize.__dirname + '/lib.npmtest_minimize.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-minimize/node_modules/minimize/lib/minimize.js":"'use strict';\n\n//\n// Required modules.\n//\nvar EventEmitter = require('events').EventEmitter\n  , debug = require('diagnostics')('minimize')\n  , Helpers = require('./helpers')\n  , html = require('htmlparser2')\n  , uuid = require('uuid')\n  , emits = require('emits')\n  , async = require('async')\n  , util = require('util');\n\n/**\n * Minimizer constructor.\n *\n * @Constructor\n * @param {Function} parser HTMLParser2 instance, i.e. to support SVG if required.\n * @param {Object} options parsing options, optional\n * @api public\n */\nfunction Minimize(parser, options) {\n  if ('object' !== typeof options) {\n    options = parser || {};\n    options.dom = options.dom || {};\n    parser = void 0;\n  }\n\n  this.emits = emits;\n  this.plugins = Object.create(null);\n  this.helpers = new Helpers(options);\n\n  //\n  // Prepare the parser.\n  //\n  this.htmlparser = parser || new html.Parser(\n    new html.DomHandler(this.emits('read')),\n    options.dom\n  );\n\n  //\n  // Register plugins.\n  //\n  this.plug(options.plugins);\n}\n\n//\n// Add EventEmitter prototype.\n//\nutil.inherits(Minimize, EventEmitter);\n\n/**\n * Start parsing the provided content and call the callback.\n *\n * @param {String} content HTML\n * @param {Function} callback\n * @api public\n */\nMinimize.prototype.parse = function parse(content, callback) {\n  var minimize = this\n    , id = uuid.v4()\n    , sync = false\n    , output;\n\n  if (typeof callback !== 'function') {\n    sync = true;\n\n    callback = function parsed(error, result) {\n      if (error) {\n        minimize.emit('error', error);\n      }\n\n      output = result;\n    }\n  }\n\n  //\n  // Listen to DOM parsing, so the htmlparser callback can trigger it.\n  //\n  this.once('read', this.minifier.bind(this, id, sync));\n  this.once('parsed:' + id, callback);\n\n  //\n  // Initiate parsing of HTML.\n  //\n  this.htmlparser.parseComplete(content);\n\n  //\n  // Return content if generated synchronously otherwise undefined.\n  //\n  return output;\n};\n\n/**\n * Parse traversable DOM to content.\n *\n * @param {Object} error\n * @param {Object} dom presented as traversable object\n * @returns {Void}\n * @api private\n */\nMinimize.prototype.minifier = function minifier(id, sync, error, dom) {\n  if (error) throw new Error('Minifier failed to parse DOM', error);\n\n  //\n  // DOM has been completely parsed, emit the results.\n  //\n  return this.traverse(dom, '', sync, this.emits('parsed:' + id));\n};\n\n/**\n * Traverse the data object, reduce data to string.\n *\n * @param {Array} data\n * @param {String} html compiled contents.\n * @param {Function} done Completion callback.\n * @return {String} completed HTML\n * @api private\n */\nMinimize.prototype.traverse = function traverse(data, html, sync, done) {\n  var minimize = this\n    , plugins = Object.keys(this.plugins);\n\n  //\n  // Ensure data can be reduced.\n  //\n  data = data || [];\n\n  /**\n   * (A)synchronously return or callback with HTML.\n   *\n   * @param {Error} error Runtime error\n   * @param {String} html minimized HTML\n   * @param {Function} cb optional callback\n   * @returns {String} HTML\n   * @api private\n   */\n  function returns(error, html, cb) {\n    var fn = typeof cb === 'function';\n\n    if (error) {\n      debug('Error received: %s', error.message);\n\n      if (fn) cb(error);\n      return minimize.emit('error', error);\n    }\n\n    if (fn) return cb(null, html);\n    return html;\n  }\n\n  /**\n   * For all children run same iterator.\n   *\n   * @param {Object} element Current element\n   * @param {String} content Current minimized HTML, memo.\n   * @param {Function} next Completion callback.\n   * @returns {Function} Runner.\n   * @api private\n   */\n  function traverser(element, content, next) {\n    return function () {\n      return minimize.traverse(element.children, content, sync, step(element, 'close', next))\n    };\n  }\n\n  /**\n   * Minimize single level of HTML.\n   *\n   * @param {Object} element Properties\n   * @param {String} type Element type\n   * @param {Function} cb Completion callback\n   * @api private\n   */\n  function step(element, type, cb) {\n    return function generate(error, html) {\n      html += minimize.helpers[type](element);\n      return returns(error, html, cb);\n    }\n  }\n\n  /**\n   * Traverse children of current element.\n   *\n   * @param {Object} element Properties\n   * @param {Function} cb Completion callback\n   * @api private\n   */\n  function run(element, cb) {\n    return function level(error, content) {\n      debug('Traversing children of element %s', element.name);\n\n      if (sync) {\n        return traverser(element, content, cb)();\n      }\n\n      setImmediate(traverser(element, content, cb));\n    }\n  }\n\n  /**\n   * Create opening string of element.\n   *\n   * @param {Object} element Properties\n   * @param {String} html Current minimized HTML, memo.\n   * @param {Function} cb Completion callback\n   * @returns {String} Result\n   * @api private\n   */\n  function open(element, html, cb) {\n    return step(element, 'open', cb)(null, html);\n  }\n\n  /**\n   * Create plugins for element.\n   *\n   * @param {Object} element Properties.\n   * @return {Function} Plugin function to run.\n   * @api private\n   */\n  function createPlug(element) {\n    return function plug(plugin, fn) {\n      fn = fn || minimize.emits('plugin');\n\n      debug('Running plugin for element %s', element.name);\n      minimize.plugins[plugin].element.call(minimize, element, fn);\n    }\n  }\n\n  /**\n   * Reduce each HTML element and its children.\n   *\n   * @param {String} html Current compiled HTML, memo.\n   * @param {Object} element Current element.\n   * @param {Function} step Completion callback\n   * @returns {String} minimized HTML.\n   * @api private\n   */\n  function reduce(html, element, next) {\n    //\n    // Run the registered plugins before the element is processed.\n    // Note that the plugins are not run in order.\n    //\n    if (sync) {\n      plugins.forEach(createPlug(element));\n      return open(element, html, run(element, next));\n    }\n\n    async.eachSeries(plugins, createPlug(element), function finished(error) {\n      if (error) return next(error);\n      return open(element, html, run(element, next));\n    });\n  }\n\n  //\n  // Reduce all provided elements to minimized HTML.\n  //\n  if (sync) {\n    debug('Synchronously reducing %d parsed HTML elements', data.length);\n    return done(null, data.reduce(reduce, html));\n  }\n\n  debug('Asynchronously reducing %d parsed HTML elements', data.length);\n  return async.reduce(data, html, reduce, done);\n};\n\n/**\n * Register provided plugins.\n *\n * @param {Array} plugins Collection of plugins\n * @api private\n */\nMinimize.prototype.plug = function plug(plugins) {\n  if (!Array.isArray(plugins)) return;\n  var minimize = this;\n\n  plugins.forEach(function each(plugin) {\n    minimize.use(plugin);\n  });\n};\n\n/**\n * Register a new plugin.\n *\n * ```js\n * minimize.use('dropClass', {\n *   element: function () { }\n * });\n * ```\n *\n * @param {String} id The id of the plugin.\n * @param {Object} plugin The plugin module.\n * @api public\n */\nMinimize.prototype.use = function use(id, plugin) {\n  if ('object' === typeof id) {\n    plugin = id;\n    id = plugin.id;\n  }\n\n  if (!id) throw new Error('Plugin should be specified with an id.');\n  if ('string' !== typeof id) throw new Error('Plugin id should be a string.');\n  if ('string' === typeof plugin) plugin = require(plugin);\n\n  //\n  // Plugin accepts an object or a function only.\n  //\n  if (!/^(object|function)$/.test(typeof plugin)) {\n    throw new Error('Plugin should be an object or function.');\n  }\n\n  //\n  // Plugin requires an element method to be specified.\n  //\n  if ('function' !== typeof plugin.element) {\n    throw new Error('The plugin is missing an element method to execute.');\n  }\n\n  if (id in this.plugins) {\n    throw new Error('The plugin name was already defined.');\n  }\n\n  debug('Added plugin `%s`', id);\n\n  this.plugins[id] = plugin;\n  return this;\n};\n\n//\n// Expose the minimize function by default.\n//\nmodule.exports = Minimize;","/home/travis/build/npmtest/node-npmtest-minimize/node_modules/minimize/lib/helpers.js":"'use strict';\n\n//\n// Required modules.\n//\nvar list = require('./list');\n\n//\n// Predefined parsing options.\n//\nvar config = {\n  empty: false,                     // remove(false) or retain(true) empty attributes\n  cdata: false,                     // remove(false) or retain(true) CDATA from scripts\n  comments: false,                  // remove(false) or retain(true) comments\n  conditionals: false,              // remove(false) or retain(true) ie conditional comments\n  ssi: false,                       // remove(false) or retain(true) server side includes\n  spare: false,                     // remove(false) or retain(true) redundant attributes\n  quotes: false,                    // remove(false) or retain(true) quotes if not required\n  loose: false,                     // remove(false) all or retain(true) one whitespace\n  whitespace: false,                // remove(false) or retain(true) whitespace in attributes\n  dom: {                            // see https://github.com/fb55/htmlparser2 for all options\n    xmlMode: false,                     // Disables the special behavior for script/style tags (false by default)\n    lowerCaseAttributeNames: true,      // call .toLowerCase for each attribute name (true if xmlMode is `false`)\n    lowerCaseTags: true                 // call .toLowerCase for each tag name (true if xmlMode is `false`)\n  }\n};\n\n/**\n * Compact the value, replace multiple white spaces and newlines\n * with a single white space.\n *\n * @param {String} value Value to compact\n * @param {Boolean} keepNewlines Do not remove newlines\n * @return {String} Compacted data\n * @api private\n */\nfunction compact(value, keepNewlines) {\n  var check = keepNewlines ? / +/g : /\\s+/g;\n  return value.replace(check, ' ');\n}\n\n/**\n * Helper constructor.\n *\n * @Constructor\n * @param {Object} options\n * @api public\n */\nfunction Helpers(options) {\n  this.config = {};\n\n  for (var key in options || {}) {\n    this.config[key] = options[key];\n  }\n\n  this.ancestor = [];\n}\n\n/**\n * Wraps the attribute in quotes, or anything that needs them.\n *\n * @param {String} value\n * @return {String}\n * @api public\n */\nHelpers.prototype.quote = function quote(value) {\n  var delim = ~value.indexOf('\"') ? \"'\" : '\"';\n\n  //\n  // Quote is only called if required so it's safe to return quotes on no value.\n  //\n  if (!value) return '\"\"';\n\n  //\n  // Always quote attributes having spaces, equal signs, single quotes\n  // or ending in a slash. Attributes containing double quotes will be\n  // single quoted.\n  //\n  return /[\\s='\"<>]+|\\/$/.test(value) || this.config.quotes\n    ? delim + value + delim\n    : value;\n};\n\n/**\n * Is an element inline or not.\n *\n * @param {Object} element\n * @return {Boolean}\n * @api private\n */\nHelpers.prototype.isInline = function isInline(element) {\n  return !!~list.inline.indexOf(element.name);\n};\n\n/**\n * Create starting tag for element, if required an additional white space will\n * be added to retain flow of inline elements.\n *\n * @param {Object} element\n * @return {String}\n * @api public\n */\nHelpers.prototype.tag = function tag(element) {\n  //\n  // Check if the current element requires structure, store for later reference.\n  //\n  if (this.structure(element)) this.ancestor.push(element);\n\n  return '<' + element.name + this.attributes(element) + '>';\n};\n\n/**\n * Loop set of attributes belonging to an element. Surrounds attributes with\n * quotes if required, omits if not.\n *\n * @param {Object} element element containing attributes\n * @return {String}\n * @api public\n */\nHelpers.prototype.attributes = function attributes(element) {\n  var attr = element.attribs\n    , self = this\n    , name = element.name\n    , value, bool, allowed;\n\n  if (!attr || typeof attr !== 'object') return '';\n  return Object.keys(attr).reduce(function (result, key) {\n    value = attr[key];\n    bool = ~list.redundant.indexOf(key);\n\n    //\n    // Is the attribute allowed on the HTML element? If so, allow special\n    // treatment. If not, then just return the full attribute and its value.\n    //\n    allowed = Object.hasOwnProperty.call(list.attributes, key) && list.attributes[key];\n    allowed = allowed\n      ? allowed === '*' || ~allowed.indexOf(name)\n      : ~key.indexOf('data-');\n\n    //\n    // Remove attributes that are empty, not boolean and no semantic value.\n    //\n    if (!self.config.empty && !/data|itemscope/.test(key) && !bool && !value && allowed) return result;\n\n    //\n    // Boolean attributes should be added sparse, also unset attributes\n    // should remain unset if retained with `empty` option.\n    //\n    result = result + ' ' + key;\n    if (!self.config.spare) {\n      if (!value.length) return result;\n      if (allowed && bool && (value === key || 'true' === value)) return result;\n    }\n\n    //\n    // Return full attribute with value.\n    //\n    return result + '=' + self.quote(!self.config.whitespace ? compact(value).trim() : value);\n  }, '');\n};\n\n/**\n * Proxy to render HTML.\n *\n * @param {Object} element\n * @return {String}\n * @api public\n */\nHelpers.prototype.open = function open(element) {\n  if (element.type in this) {\n    return this[element.type](element);\n  }\n};\n\n/**\n * Provide closing tag for element if required.\n *\n * @param {Object} element\n * @return {String}\n * @api public\n */\nHelpers.prototype.close = function close(element) {\n  if (this.structure(element)) this.ancestor.pop();\n\n  return ~list.node.indexOf(element.type) && !~list.singular.indexOf(element.name)\n    ? '</' + element.name + '>'\n    : '';\n};\n\n/**\n * Check the script is actual script or abused for template/config. Scripts\n * without attribute type or type=\"text/javascript\" are JS elements by default.\n *\n * @param {Object} element\n * @return {Boolean}\n * @api public\n */\nHelpers.prototype.isJS = function isJS(element) {\n  return (element.type === 'script' && (!element.attribs || !element.attribs.type))\n    || (element.type === 'script' && element.attribs.type === 'text/javascript');\n};\n\n/**\n * Check if the element is of type style.\n *\n * @param {Object} element\n * @return {Boolean}\n * @api public\n */\nHelpers.prototype.isStyle = function isStyle(element) {\n  return element.type === 'style';\n};\n\n/**\n * Check if an element needs to retain its internal structure, e.g. this goes\n * for elements like script, style, textarea or pre.\n *\n * @param {Object} element\n * @return {Boolean}\n * @api public\n */\nHelpers.prototype.structure = function structure(element) {\n  return element.type !== 'text'\n    ? !!~list.structural.indexOf(element.name) || this.isJS(element) || this.isStyle(element)\n    : false;\n};\n\n/**\n * Return trimmed text, if text requires no structure new lines and spaces will\n * be replaced with a single white space. Any white space adjacent to an inline\n * element is replaced with a single space.\n *\n * @param {Object} element\n * @return {String} text\n * @api public\n */\nHelpers.prototype.text = function text(element) {\n  var ancestors = this.ancestor.length\n    , content = element.data\n    , next = element.next\n    , prev = element.prev\n    , space = this.config.loose ? ' ' : '';\n\n  //\n  // Collapse space between text and inline elements, clobber space without\n  // inline elements.\n  //\n  if (!ancestors) {\n    content = compact(content.replace(\n      ancestors ? /^[^\\S\\n]+/ : /^\\s+/,\n      prev && this.isInline(prev) ? ' ' : space\n    ).replace(\n      ancestors ? /[^\\S\\n]+$/ : /\\s+$/,\n      next && this.isInline(next) ? ' ' : space\n    ));\n  }\n\n  //\n  // Remove CDATA from scripts.\n  //\n  if (!this.config.cdata && ancestors && this.isJS(this.ancestor[ancestors - 1])) {\n    content = content.replace(/\\/*<!\\[CDATA\\[/g, '').replace(/\\/*\\]\\]>/g, '');\n  }\n\n  return content;\n};\n\n/**\n * Returned parsed comment or empty string if config.comments = true.\n *\n * @param {Object} element\n * @return {String} comment\n * @api public\n */\nHelpers.prototype.comment = function comment(element) {\n  var cfg = this.config;\n\n  function io() {\n    return '<!--' + compact(element.data, true).trim() + '-->';\n  }\n\n  if (cfg.ssi && ~element.data.indexOf('#')) return io();\n  if (cfg.conditionals && (~element.data.indexOf('[if')\n      || ~element.data.indexOf('<![endif'))) return io();\n  if (cfg.comments) return io();\n\n  return '';\n};\n\n/**\n * Return parsed directive.\n *\n * @param {Object} element\n * @return {String} comment\n * @api public\n */\nHelpers.prototype.directive = function directive(element) {\n  return '<' + element.data + '>';\n};\n\n//\n// Define some proxies for easy external reference.\n//\nHelpers.prototype.script = Helpers.prototype.tag;\nHelpers.prototype.style = Helpers.prototype.tag;\n\n//\n// Create public proxies.\n//\nmodule.exports = Helpers;\n","/home/travis/build/npmtest/node-npmtest-minimize/node_modules/minimize/lib/list.js":"//\n// List of inline elements, br is left out deliberatly so it is treated as block\n// level element. Spaces around br elements are redundant.\n//\nexports.inline = [\n  'a', 'abbr', 'b', 'bdo', 'button', 'cite',\n  'code', 'dfn', 'em', 'i', 'img', 'input', 'kbd',\n  'label', 'q', 's', 'samp', 'small', 'span', 'strong',\n  'sub', 'sup', 'textarea', 'var'\n];\n\n//\n// List of singular elements, e.g. elements that have no closing tag.\n//\nexports.singular = [\n  'area', 'base', 'br', 'col', 'command', 'embed', 'hr',\n  'img', 'input', 'link', 'meta', 'param', 'source', 'wbr'\n];\n\n//\n// List of redundant attributes, e.g. boolean attributes that require no value.\n//\nexports.redundant = [\n  'autofocus', 'disabled', 'multiple', 'required', 'readonly', 'hidden',\n  'async', 'defer', 'formnovalidate', 'checked', 'scoped', 'reversed',\n  'selected', 'autoplay', 'controls', 'loop', 'muted', 'seamless',\n  'default', 'ismap', 'novalidate', 'open', 'typemustmatch', 'truespeed',\n  'itemscope', 'autocomplete', 'download', 'draggable', 'novalidate',\n  'sortable', 'spellcheck'\n];\n\n//\n// Elements that have special content, e.g. JS or CSS.\n//\nexports.node = [ 'tag', 'script', 'style' ];\n\n//\n// Elements that require and should keep structure to their content.\n//\nexports.structural = [ 'pre', 'textarea', 'code' ];\n\n//\n// Attribute table, global attributes like `hidden` and `id` are not\n// included as these attributes require no additional checks.\n//\nexports.attributes = {\n  'hidden': '*',\n  'high': 'meter',\n  'href': ['a', 'area', 'base', 'link'],\n  'hreflang': ['a', 'area', 'link'],\n  'http-equiv': 'meta',\n  'icon': 'command',\n  'id': '*',\n  'ismap': 'img',\n  'itemprop': '*',\n  'itemscope': '*',\n  'keytype': 'keygen',\n  'kind': 'track',\n  'label': 'track',\n  'lang': '*',\n  'language': 'script',\n  'list': 'input',\n  'loop': ['audio', 'bgsound', 'marquee', 'video'],\n  'low': 'meter',\n  'manifest': 'html',\n  'max': ['input', 'meter', 'progress'],\n  'maxlength': ['input', 'textarea'],\n  'media': ['a', 'area', 'link', 'source', 'style'],\n  'method': 'form',\n  'min': ['input', 'meter'],\n  'multiple': ['input', 'select'],\n  'name': ['button', 'form', 'fieldset', 'iframe', 'input', 'keygen', 'object', 'output', 'select', 'textarea', 'map', 'meta', 'param'],\n  'novalidate': 'form',\n  'open': 'details',\n  'optimum': 'meter',\n  'pattern': 'input',\n  'ping': ['a', 'area'],\n  'placeholder': ['input', 'textarea'],\n  'poster': 'video',\n  'preload': ['audio', 'video'],\n  'pubdate': 'time',\n  'radiogroup': 'command',\n  'readonly': ['input', 'textarea'],\n  'rel': ['a', 'area', 'link'],\n  'required': ['input', 'select', 'textarea'],\n  'reversed': 'ol',\n  'rows': 'textarea',\n  'rowspan': ['td', 'th'],\n  'sandbox': 'iframe',\n  'spellcheck': '*',\n  'scope': 'th',\n  'scoped': 'style',\n  'seamless': 'iframe',\n  'selected': 'option',\n  'shape': ['a', 'area'],\n  'size': ['input', 'select'],\n  'sizes': 'link',\n  'span': ['col', 'colgroup'],\n  'src': ['audio', 'embed', 'iframe', 'img', 'input', 'script', 'source', 'track', 'video'],\n  'srcdoc': 'iframe',\n  'srclang': 'track',\n  'srcset': 'img',\n  'start': 'ol',\n  'step': 'input',\n  'style': '*',\n  'summary': 'table',\n  'tabindex': '*',\n  'target': ['a', 'area', 'base', 'form'],\n  'title': '*',\n  'type': ['button', 'input', 'command', 'embed', 'object', 'script', 'source', 'style', 'menu'],\n  'usemap': ['img',  'input', 'object'],\n  'value': ['button', 'option', 'input', 'li', 'meter', 'progress', 'param'],\n  'width': ['canvas', 'embed', 'iframe', 'img', 'input', 'object', 'video'],\n  'wrap': 'textarea',\n  'border': ['img', 'object', 'table'],\n  'buffered': ['audio', 'video'],\n  'challenge': 'keygen',\n  'charset': ['meta', 'script'],\n  'checked': ['command', 'input'],\n  'cite': ['blockquote', 'del', 'ins', 'q'],\n  'class': '*',\n  'code': 'applet',\n  'codebase': 'applet',\n  'color': ['basefont', 'font', 'hr'],\n  'cols': 'textarea',\n  'colspan': ['td', 'th'],\n  'content': ['meta'],\n  'contenteditable': '*',\n  'contextmenu': '*',\n  'controls': ['audio', 'video'],\n  'coords': ['area'],\n  'data': 'object',\n  'datetime': ['del', 'ins', 'time'],\n  'default': 'track',\n  'defer': 'script',\n  'dir': '*',\n  'dirname': ['input', 'textarea'],\n  'disabled': ['button', 'command', 'fieldset', 'input', 'keygen', 'optgroup', 'option', 'select', 'textarea'],\n  'download': ['a', 'area'],\n  'draggable': '*',\n  'dropzone': '*',\n  'enctype': 'form',\n  'for': ['label', 'output'],\n  'form': ['button', 'fieldset', 'input', 'keygen', 'label', 'meter', 'object', 'output', 'progress', 'select', 'textarea'],\n  'formaction': ['input', 'button'],\n  'headers': ['td', 'th'],\n  'height': ['canvas', 'embed', 'iframe', 'img', 'input', 'object', 'video'],\n  'accept': ['form', 'input'],\n  'accept-charset': 'form',\n  'accesskey': '*',\n  'action': 'form',\n  'align': ['applet', 'caption', 'col', 'colgroup',  'hr', 'iframe', 'img', 'table', 'tbody',  'td',  'tfoot' , 'th', 'thead', 'tr'],\n  'alt': ['applet', 'area', 'img', 'input'],\n  'async': 'script',\n  'autocomplete': ['form', 'input'],\n  'autofocus': ['button', 'input', 'keygen', 'select', 'textarea'],\n  'autoplay': ['audio', 'video'],\n  'autosave': 'input',\n  'bgcolor': ['body', 'col', 'colgroup', 'marquee', 'table', 'tbody', 'tfoot', 'td', 'th', 'tr'],\n  'draggable': '*',\n  'novalidate': ['form'],\n  'sortable': ['table'],\n  'spellcheck': '*'\n};"}